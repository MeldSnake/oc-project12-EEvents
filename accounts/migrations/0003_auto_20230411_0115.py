# Generated by Django 4.2 on 2023-04-10 20:17

from django.db import migrations
from django.contrib.auth.models import Group, Permission

from accounts.models import UserRoleChoices


def create_user_groups(apps, schema_editor):
    # obtaining all permissions per model
    client_perms = Permission.objects.filter(
        content_type__app_label="clients",
        content_type__model="client",
    )
    contract_perms = Permission.objects.filter(
        content_type__app_label="contracts",
        content_type__model="contract",
    )
    event_perms = Permission.objects.filter(
        content_type__app_label="events",
        content_type__model="event",
    )

    # Creating or Obtaining the group management
    (
        management_group,
        created,
    ) = Group.objects.get_or_create(name="management")
    if created:
        # If newly created assign the required permissions to the group
        for permission in [*client_perms, *contract_perms, *event_perms]:
            management_group.permissions.add(permission)

    # Creating or Obtaining the group sales
    (
        sales_group,
        created,
    ) = Group.objects.get_or_create(name="sales")
    if created:
        # If newly created assign the required permissions to the group
        permissions = [
            *client_perms.filter(
                codename__in=[
                    "add_client",
                    "view_client",
                    "change_client",
                ],
            ),
            *contract_perms.filter(
                codename__in=[
                    "add_contract",
                    "view_contract",
                    "change_contract",
                ],
            ),
            *event_perms.filter(
                codename__in=[
                    "add_event",
                    "view_event",
                    "change_event",
                ],
            ),
        ]
        for permission in permissions:
            sales_group.permissions.add(permission)

    # Creating or Obtaining the group support
    (
        support_group,
        created,
    ) = Group.objects.get_or_create(name="support")
    if created:
        # If newly created assign the required permissions to the group
        permissions = [
            *client_perms.filter(
                codename__in=[
                    "view_client",
                ],
            ),
            *contract_perms.filter(
                codename__in=[
                    "view_contract",
                ],
            ),
            *event_perms.filter(
                codename__in=[
                    "view_event",
                    "change_event",
                ],
            ),
        ]
        for permission in permissions:
            support_group.permissions.add(permission)

    user_model = apps.get_model("accounts", "User")

    for user in user_model.objects.all():
        if user.role == UserRoleChoices.SALES:
            user.groups.add(sales_group)
        elif user.role == UserRoleChoices.SUPPORT:
            user.groups.add(support_group)
        elif user.role == UserRoleChoices.MANAGEMENT:
            user.groups.add(management_group)
        # elif user.role == UserRoleChoices.ADMIN:
        #     user.groups


def reverse_user_groups(apps, schema_editor):
    management_group = Group.objects.get(name="management")
    management_group.delete()

    sales_group = Group.objects.get(name="sales")
    sales_group.delete()

    support_group = Group.objects.get(name="support")
    support_group.delete()


class Migration(migrations.Migration):
    dependencies = [
        ("accounts", "0002_alter_user_role"),
    ]

    operations = [
        migrations.RunPython(create_user_groups, reverse_user_groups),
    ]
